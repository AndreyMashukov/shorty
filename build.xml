<project name="Solitaire/Shorty" default="build" basedir="." xmlns:if="ant:if">

 <property environment="env"/>
 <property name="copyright" value="2016 Andrey Mashukov"/>
 <property name="license" value="http://www.gefest.com.au/license Gefest proprietary license"/>

 <!-- Clean up -->
 <target name="clean">
  <delete dir="build"/>
  <delete dir="vendor_production"/>
  <delete dir="templates_c"/>
  <delete file="tests/webserver.log"/>
  <antcall target="decompose"/>
 </target>

 <!-- Remove composer files -->
 <target name="decompose">
  <delete dir="vendor"/>
  <delete file="composer.lock"/>
 </target>

 <!-- Download dependencies -->
 <target name="dependencies">
  <exec executable="composer" failonerror="true">
   <env key="COMPOSER_VENDOR_DIR" value="vendor_production"/>
   <arg line="update --no-dev" />
  </exec>
  <exec executable="composer" failonerror="true">
   <arg line="update" />
  </exec>
 </target>

 <!-- Generate gettext-->
 <target name="gettext" if="env.TRANSLATOR">
  <exec executable="vendor/bin/gettextgenerator" failonerror="true">
   <arg line="${basedir} --exclude ${basedir}/vendor ${env.TRANSLATOR}" />
  </exec>
  <condition property="svncredentials">
   <and>
    <isset property="env.SVN_USER"/>
    <isset property="env.SVN_PASS"/>
   </and>
  </condition>
  <exec executable="svn" failonerror="true" if:set="svncredentials">
   <arg line="ci --username ${env.SVN_USER} --password ${env.SVN_PASS} --no-auth-cache -m &quot;Automatically generated MO files, build ${env.BUILD_NUMBER}&quot;" />
  </exec>
 </target>

 <!-- Translate XML files -->
 <target name="xmltranslate" if="env.TRANSLATOR">
  <fileset id="xmlfiles" dir="${basedir}" casesensitive="yes">
   <patternset>
    <include name="forms/*"/>
   </patternset>
  </fileset>

  <!-- First pass is needed to get all translatable strings requested -->
  <apply executable="vendor/bin/xmltranslate" force="true">
   <fileset refid="xmlfiles"/>
   <identitymapper/>
   <srcfile/>
   <targetfile/>
   <arg line="${env.TRANSLATOR}"/>
  </apply>

  <!-- Second pass is needed to fail in case if not all translations are ready -->
  <apply executable="vendor/bin/xmltranslate" failonerror="true" force="true">
   <fileset refid="xmlfiles"/>
   <identitymapper/>
   <srcfile/>
   <targetfile/>
   <arg line="${env.TRANSLATOR}"/>
  </apply>

  <condition property="svncredentials">
   <and>
    <isset property="env.SVN_USER"/>
    <isset property="env.SVN_PASS"/>
   </and>
  </condition>
  <apply executable="svn" failonerror="true" if:set="svncredentials">
   <fileset refid="xmlfiles"/>
   <arg line="ci --username ${env.SVN_USER} --password ${env.SVN_PASS} --no-auth-cache -m &quot;Automatically translated XML, build ${env.BUILD_NUMBER}&quot;" />
   <srcfile/>
  </apply>
 </target>

 <!-- Configure the project -->
 <target name="configure">
  <sequential>
   <antcall target="htaccess"/>
   <antcall target="configs"/>
   <antcall target="dao"/>
   <antcall target="sitecomponents"/>
  </sequential>
 </target>

 <!-- Generate .htaccess file -->
 <target name="htaccess">
  <exec executable="vendor/bin/htaccessgenerator" failonerror="true">
   <arg line="${basedir} --exclude vendor" />
  </exec>
  <condition property="svncredentials">
   <and>
    <isset property="env.SVN_USER"/>
    <isset property="env.SVN_PASS"/>
   </and>
  </condition>
  <exec executable="svn" failonerror="true" if:set="svncredentials">
   <arg line="ci --username ${env.SVN_USER} --password ${env.SVN_PASS} --no-auth-cache -m &quot;Automatically generated .htaccess file, build ${env.BUILD_NUMBER}&quot;" />
  </exec>
 </target>

 <!-- Generate config files -->
 <target name="configs">
  <exec executable="vendor/bin/configgenerator" failonerror="true">
   <arg line="${basedir} '${copyright}' '${license}' --exclude vendor" />
  </exec>
  <condition property="svncredentials">
   <and>
    <isset property="env.SVN_USER"/>
    <isset property="env.SVN_PASS"/>
   </and>
  </condition>
  <exec executable="svn" failonerror="true" if:set="svncredentials">
   <arg line="ci --username ${env.SVN_USER} --password ${env.SVN_PASS} --no-auth-cache -m &quot;Automatically generated config.php.sample file and manifest files, build ${env.BUILD_NUMBER}&quot;" />
  </exec>
 </target>

 <!-- Generate DAO description files -->
 <target name="dao">
  <exec executable="vendor/bin/daodescriptiongenerator" failonerror="true">
   <arg line="--exclude vendor --exclude vendor_production/logics/dao/tests ${basedir}" />
  </exec>
  <condition property="svncredentials">
   <and>
    <isset property="env.SVN_USER"/>
    <isset property="env.SVN_PASS"/>
   </and>
  </condition>
  <exec executable="svn" failonerror="true" if:set="svncredentials">
   <arg line="ci --username ${env.SVN_USER} --password ${env.SVN_PASS} --no-auth-cache -m &quot;Automatically generated DAO description file, build ${env.BUILD_NUMBER}&quot;" />
  </exec>
 </target>

 <!-- Generate SiteComponents.xml -->
 <target name="sitecomponents">
  <exec executable="vendor/bin/sitecomposer" failonerror="true">
   <arg line="${basedir} --exclude tests --exclude vendor"/>
  </exec>
  <condition property="svncredentials">
   <and>
    <isset property="env.SVN_USER"/>
    <isset property="env.SVN_PASS"/>
   </and>
  </condition>
  <exec executable="svn" failonerror="true" if:set="svncredentials">
   <arg line="ci --username ${env.SVN_USER} --password ${env.SVN_PASS} --no-auth-cache -m &quot;Automatically generated SiteComponents.xml, build ${env.BUILD_NUMBER}&quot;" />
  </exec>
 </target>

 <!-- Run code analysis -->
 <target name="codeanalysis">
  <sequential>
   <antcall target="validateschemas"/>
   <antcall target="maps"/>
   <antcall target="pdepend"/>
   <antcall target="phpmd"/>
   <antcall target="phploc"/>
   <antcall target="phpcpd"/>
   <antcall target="phpcs"/>
   <antcall target="phpdoc"/>
   <antcall target="phpda"/>
  </sequential>
 </target>

 <!-- Validate all XML schemas -->
 <target name="validateschemas">
  <fileset id="schemas.fs" dir="${basedir}" casesensitive="yes">
   <patternset>
    <include name="**/*.xsd"/>
    <exclude name="vendor/**/*.xsd"/>
    <exclude name="vendor_production/**/*.xsd"/>
   </patternset>
  </fileset>
  <pathconvert refid="schemas.fs" property="schemas"/>
  <exec executable="/bin/sh" failonerror="true">
   <arg line="vendor/logics/phpunit-extensions/validateschemas ${schemas}"/>
  </exec>
 </target>

 <!-- Validate and visualize website maps -->
 <target name="maps">
  <mkdir dir="${basedir}/build/maps"/>
  <exec executable="vendor/bin/mapsgenerator" failonerror="true">
   <arg line="${basedir} ${basedir}/build/maps/index.html"/>
  </exec>
 </target>

 <!-- Generate jdepend.xml and software metrics charts -->
 <target name="pdepend">
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <exec executable="vendor/bin/pdepend">
   <arg line="--jdepend-xml=${basedir}/build/logs/jdepend.xml --overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg --jdepend-chart=${basedir}/build/pdepend/dependencies.svg --ignore=vendor,vendor_production,tests ${basedir}" />
  </exec>
 </target>

 <!-- Generate pmd.xml -->
 <target name="phpmd">
  <mkdir dir="${basedir}/build/logs"/>
  <exec executable="vendor/bin/phpmd">
   <arg line="${basedir} xml codesize,unusedcode --exclude vendor,vendor_production --reportfile ${basedir}/build/logs/pmd.xml" />
  </exec>
 </target>

 <!-- Generate phploc.csv -->
 <target name="phploc">
  <mkdir dir="${basedir}/build/logs"/>
  <exec executable="vendor/bin/phploc">
   <arg line="--log-csv ${basedir}/build/logs/phploc.csv --exclude=vendor --exclude=vendor_production --exclude=tests ${basedir}" />
  </exec>
 </target>

 <!-- Generate pmd-cpd.xml -->
 <target name="phpcpd">
  <mkdir dir="${basedir}/build/logs"/>
  <exec executable="vendor/bin/phpcpd">
   <arg line="--log-pmd ${basedir}/build/logs/pmd-cpd.xml --exclude vendor --exclude vendor_production ${basedir}" />
  </exec>
 </target>

 <!-- Generate checkstyle.xml -->
 <target name="phpcs">
  <mkdir dir="${basedir}/build/logs"/>
  <exec executable="vendor/bin/phpcs" output="/dev/null">
   <arg line="--report=checkstyle --report-file=${basedir}/build/logs/checkstyle.xml --ignore=vendor --ignore=vendor_production ${basedir}" />
  </exec>
 </target>

 <!-- Generate API documentation -->
 <target name="phpdoc">
  <mkdir dir="${basedir}/build/api"/>
  <exec executable="vendor/bin/phpdoc">
   <arg line="-d ${basedir} -t build/api --title='${ant.project.name} documentation' --defaultpackagename=Logics --ignore-tags=untranslatable,donottranslate,requiredconst,optionalconst,internalconst,codeCoverageIgnore,dataProvider,depends,expectedException,expectedExceptionMessage,expectedExceptionMessageRegExp,requires,runTestsInSeparateProcesses,runInSeparateProcess,soap,soap-header-input,soap-header-output,soap-wsdl,soap-indicator --template='responsive-twig' --ignore=vendor/ --ignore=vendor_production/" />
  </exec>
 </target>

 <!-- Generate dependency graph -->
 <target name="phpda">
  <mkdir dir="${basedir}/build/phpda"/>
  <exec executable="vendor/bin/phpda">
   <arg line="analyze ${basedir}/phpda.yml" />
  </exec>
 </target>

 <!-- Run tests -->
 <target name="tests">
  <sequential>
   <antcall target="phpunit"/>
   <antcall target="checkcoveragexistence"/>
  </sequential>
 </target>

 <!-- Run unit tests -->
 <target name="phpunit">
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/testdox"/>
  <exec executable="vendor/bin/phpunit" failonerror="true">
   <arg line="--debug"/>
  </exec>
 </target>

 <!-- Ensuring that coverage was actually built -->
 <target name="checkcoveragexistence">
  <fail message="Coverage was not fully built">
   <condition>
    <or>
     <not>
      <available file="${basedir}/build/logs/clover.xml"/>
     </not>
     <not>
      <available file="${basedir}/build/coverage/index.html"/>
     </not>
    </or>
   </condition>
  </fail>
 </target>

 <!-- Full build -->
 <target name="build">
  <sequential>
   <antcall target="clean"/>
   <antcall target="dependencies"/>
   <antcall target="configure"/>
   <antcall target="codeanalysis"/>
   <antcall target="tests"/>
   <antcall target="decompose"/>
  </sequential>
 </target>

 <!-- Translation -->
 <target name="translation">
  <sequential>
   <antcall target="dependencies"/>
   <antcall target="gettext"/>
   <antcall target="xmltranslate"/>
   <antcall target="decompose"/>
  </sequential>
 </target>

</project>
